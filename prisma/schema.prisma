generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Community {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  email       String  @unique @db.VarChar(255)
  website     String? @db.VarChar(255)
  description String? @db.VarChar(500)
  password    String  @db.VarChar(255)
  verified    Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Event     Event[]

  avatar    File?   @relation(fields: [avatar_id], references: [id])
  avatar_id String?

  @@map("communities")
}

model File {
  id           String @id @default(uuid())
  originalName String @map("original_name") @db.VarChar(255)
  filename     String @db.VarChar(255)

  event     Event[]
  Community Community[]

  @@map("files")
}

enum StatusEnum {
  PUBLISHED
  CANCELLED
}

model Event {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(255)
  description String
  limit       Int
  date        DateTime   @db.Date
  status      StatusEnum @default(PUBLISHED)
  startTime   String     @db.VarChar(5)
  endTime     String     @db.VarChar(5)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  community   Community? @relation(fields: [communityId], references: [id])
  communityId String
  banner      File?      @relation(fields: [banner_id], references: [id])
  banner_id   String
  Ticket      Ticket[]

  @@map("events")
}

model Ticket {
  id            String   @id @default(uuid())
  attendeeName  String   @db.VarChar(255)
  attendeeEmail String   @unique @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@map("tickets")
}
